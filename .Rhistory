rbind(exp_unit_sales,
end_inv,
total_reqd,
begin_inv,
reqd_prod,
annual_prod) %>%
kbl() %>%
kable_styling()
exp_unit_sales <- c(Q1 = 20000, Q2 = 25000, Q3 = 30000, Q4 = 25000)
# ending raw materials inventory each quarter of 20% of the next quarter's production needs.
end_inv <- structure(numeric(4), names=c("Q1", "Q2", "Q3", "Q4") )
end_inv[1:3] <- exp_unit_sales[2:4] * 0.2
# Assume next year sales for Q1 is 5000 units
end_inv[4] <- 5000 * 0.2
# total required units
total_reqd <- structure(numeric(4), names=c("Q1", "Q2", "Q3", "Q4") )
total_reqd <- exp_unit_sales + end_inv
# beninning inventory
# have 875 units from last quarter of previous year
begin_inv <- structure(numeric(4), names=c("Q1", "Q2", "Q3", "Q4") )
begin_inv[1] <- 875
# begin_inv = previous quarter ending inv
begin_inv[2:4] <- end_inv[1:3]
# Required Producion (number of units)
reqd_prod <- total_reqd - begin_inv
# Total Annual Production
annual_prod <- structure(numeric(4), names=c("Q1", "Q2", "Q3", "Q4") )
annual_prod[1] <- sum(reqd_prod)
rbind(exp_unit_sales,
end_inv,
total_reqd,
begin_inv,
reqd_prod,
annual_prod) %>%
kbl() %>%
kable_styling()
units_to_produce <- reqd_prod
# Each unit requires 3 kilograms of materials
materials_per_unit <- structure(rep(x = 3, times = 4),
names=c("Q1", "Q2", "Q3", "Q4") )
total_materials <- units_to_produce * materials_per_unit
end_materials <- structure(numeric(4), names=c("Q1", "Q2", "Q3", "Q4") )
# ending raw materials inventory each quarter of 10% of the next quarter's production needs
end_materials[1:3] <- total_materials[2:4] * 0.1
# need 15% of materials in Q1 of next year
end_materials[4] <- 2100
total_materials_reqd <- total_materials + end_materials
total_materials_reqd
begin_materials <-  structure(numeric(4), names=c("Q1", "Q2", "Q3", "Q4") )
begin_materials[1] <- 1631
begin_materials[2:4] <- end_materials[1:3]
purchase_materials <- total_materials_reqd - begin_materials
# Cost of $5 per kilogram of materials
cost_per_kg <- structure(rep(x = 5, times = 4),
names=c("Q1", "Q2", "Q3", "Q4") )
cost_purchased <- purchase_materials * cost_per_kg
# Total Annual Cost
annual_cost <- structure(numeric(4), names=c("Q1", "Q2", "Q3", "Q4") )
annual_cost[1] <- sum(cost_purchased)
units_to_produce <- reqd_prod
# Each unit requires 3 kilograms of materials
materials_per_unit <- structure(rep(x = 3, times = 4),
names=c("Q1", "Q2", "Q3", "Q4") )
total_materials <- units_to_produce * materials_per_unit
end_materials <- structure(numeric(4), names=c("Q1", "Q2", "Q3", "Q4") )
# ending raw materials inventory each quarter of 10% of the next quarter's production needs
end_materials[1:3] <- total_materials[2:4] * 0.1
# need 15% of materials in Q1 of next year
end_materials[4] <- 2100
total_materials_reqd <- total_materials + end_materials
total_materials_reqd
units_to_produce <- reqd_prod
# Each unit requires 3 kilograms of materials
materials_per_unit <- structure(rep(x = 3, times = 4),
names=c("Q1", "Q2", "Q3", "Q4") )
total_materials <- units_to_produce * materials_per_unit
end_materials <- structure(numeric(4), names=c("Q1", "Q2", "Q3", "Q4") )
# ending raw materials inventory each quarter of 10% of the next quarter's production needs
end_materials[1:3] <- total_materials[2:4] * 0.1
# need 15% of materials in Q1 of next year
end_materials[4] <- 2100
total_materials_reqd <- total_materials + end_materials
begin_materials <-  structure(numeric(4), names=c("Q1", "Q2", "Q3", "Q4") )
begin_materials[1] <- 1631
begin_materials[2:4] <- end_materials[1:3]
purchase_materials <- total_materials_reqd - begin_materials
# Cost of $5 per kilogram of materials
cost_per_kg <- structure(rep(x = 5, times = 4),
names=c("Q1", "Q2", "Q3", "Q4") )
cost_purchased <- purchase_materials * cost_per_kg
# Total Annual Cost
annual_cost <- structure(numeric(4), names=c("Q1", "Q2", "Q3", "Q4") )
annual_cost[1] <- sum(cost_purchased)
rbind(units_to_produce,
materials_per_unit,
total_materials,
end_materials,
total_materials_reqd,
begin_materials,
purchase_materials,
cost_per_kg,
cost_purchased,
annual_cost) %>%
kbl() %>%
kable_styling()
updateR()
q()
R.version
install.packages("Rtools")
install.packages("workflowr")
install.packages(c("dplyr", "rlang", "stringi"))
library(workflowr)
wflow_git_config(user.name = "JJCoen")
wflow_start(directory = "Scotland-Vaxxed")
setwd("~/MEGA/MEGAsync/Data_Scientist/Public-Sector/Vaccinations/Vax-Scotland")
load("./data-clean/scot-mort.RData")
mort22[, year := 2022]
#| include: false
#| label: load_libraries
library(data.table)
library(kableExtra)
library(ggplot2)
library(janitor)
library(tidyr)
mort22[, year := 2022]
load("./data-clean/scot-mort.RData")
for(i in 0:12){
paste("20", i)
}
for(i in 0:12){
cat( paste("20", i) )
}
cat( paste(year, -i) )
for(i in 0:12){
cat( paste(year, i) )
}
cat( paste("mort20", i) )
mort22[, year := 2022]
mort21[, year := 2021]
mort20[, year := 2020]
mort19[, year := 2019]
mort18[, year := 2018]
mort17[, year := 2017]
mort16[, year := 2016]
mort15[, year := 2015]
mort14[, year := 2014]
mort13[, year := 2013]
mort12[, year := 2012]
#| include: false
#|
load("./data-clean/scot-mort.RData")
mort22[, year := 2022]
mort21[, year := 2021]
mort20[, year := 2020]
mort19[, year := 2019]
mort18[, year := 2018]
mort17[, year := 2017]
mort16[, year := 2016]
mort15[, year := 2015]
mort14[, year := 2014]
mort13[, year := 2013]
mort12[, year := 2012]
mort11[, year := 2011]
mort10[, year := 2010]
(dt1 <- data.table(A = letters[1:10], X = 1:10, key = "A"))
(dt2 <- data.table(A = letters[5:14], Y = 1:10, key = "A"))
merge(dt1, dt2)
merge(dt1, dt2, all = TRUE)
(dt1 <- data.table(A = letters[rep(1:3, 2)], X = 1:6, key = "A"))
(dt2 <- data.table(A = letters[rep(2:4, 2)], Y = 6:1, key = "A"))
merge(dt1, dt2, allow.cartesian=TRUE)
merge(mort10, mort11, by = "age_cat")
rbind(mort10, mort11)
mort10
mort22
mort16
mort15
#| include: false
#| label: load_libraries
library(data.table)
library(janitor)    # clean_names
library(readxl)     # read_excel
library(tidyr)      # pivot functions
library(kableExtra) # kable
library(gt)
library(purrr)      # map
library(Hmisc)      # grouping function "cut2"
library(ggplot2)
library(assertr)    # verify function
library(docstring)  # function specification
#| code-summary: "Import excel sheet giving numbers of persons by 5-year age groups for year 2022"
#| echo: false
source("./code/get-census-22.R")
source("./code/make-groups.R")
census22 <- get_census_22(is_plot=0)
# Population counts are in 5-year age groups
pop22_5yr <- census22[[1]]
newborn22 <- census22[[2]]
# age = 0 represents 0-4 year old group
# separate out a new group for newborns
# age = 0: newborns
# age = 1: 1-4 year old group
# Create new entry for age = 0
pop0 <- data.table(age = 0, pop = newborn22)
# Substract number of newborns from the 0 category
# and convert this to the 1 category
pop22_5yr[age == 0, `:=` (pop = pop - newborn22,
age = 1)]
pop22_5yr <- rbind(pop0, pop22_5yr)
# Record age groupings for year 0 and for
# 5-year categories after that
group_5yr <- pop22_5yr[, age]
# Convert age categories to HP grouping
pop22 <- make_groups(pop22_5yr, is_pop = 1)
# cleanup
rm(census22, pop0, pop22_5yr, newborn22, get_census_22)
#| message: false
source("./code/get-census-11.R")
# Population counts for each year of age
pop11_1yr <- get_census_11(is_plot = 0)
# Section age variable into the 7 HP age categories
pop11 <- make_groups(pop11_1yr, is_pop = 1)
# cleanup
rm(pop11_1yr, get_census_11)
#| code-summary: "Similar to Census 2011, population numbers are for each year of age"
source("./code/get-pop-by-year.R")
file_21 <- "./data/mid-year-pop-est-21-data.xlsx"
sheet_21 <- "Table 1"
range_21 <- "F4:CR5"
pop21 <- get_pop_by_year(file_21, sheet_21, range_21)
pop21 <- make_groups(pop21, is_pop = 1)
# cleanup
rm(file_21, range_21, sheet_21)
#| message: false
source("./code/get-pop.R")
file_20 <- "./data/mid-year-pop-est-20-data.xlsx"
sheet_20 <- "Table 1"
range_20 <- "F4:CR5"
pop20 <- get_pop(file_20, is_16 = 0)
pop20[, age := group_5yr][, age_cat := NULL]
pop20 <- make_groups(pop20, is_pop = 1)
rm(file_20, range_20, sheet_20)
#| message: false
file_19 <- "./data/mid-year-pop-est-19-data.xlsx"
pop19 <- get_pop(file_19, is_16 = 0)
pop19[, age := group_5yr][, age_cat := NULL]
pop19 <- make_groups(pop19, is_pop = 1)
rm(file_19)
#| message: false
file_18 <- "./data/mid-year-pop-est-18-tabs.xlsx"
pop18 <- get_pop(file_18, is_16 = 0)
pop18[, age := group_5yr][, age_cat := NULL]
pop18 <- make_groups(pop18, is_pop = 1)
rm(file_18)
#| message: false
file_17 <- "./data/mid-year-pop-est-17-all-tables-revised.xlsx"
pop17 <- get_pop(file_17, is_16 = 0)
pop17[, age := group_5yr][, age_cat := NULL]
pop17 <- make_groups(pop17, is_pop = 1)
rm(file_17)
#| message: false
source("./code/get-pop.R")
file_16 <- "./data/16-mid-year-pe-tab1.xlsx"
pop16 <- get_pop(file_16, is_16 = 1)
pop16[, age := group_5yr][, age_cat := NULL]
pop16 <- make_groups(pop16, is_pop = 1)
rm(file_16)
#| message: false
file_15 <- "./data/15mype-cahb-tab1.xlsx"
pop15 <- get_pop(file_15, is_16 = 0)
pop15[, age := group_5yr][, age_cat := NULL]
pop15 <- make_groups(pop15, is_pop = 1)
rm(file_15)
#| message: false
file_14 <- "./data/14mype-cahb-all-tab.xlsx"
pop14 <- get_pop(file_14, is_16 = 0)
pop14[, age := group_5yr][, age_cat := NULL]
pop14 <- make_groups(pop14, is_pop = 1)
rm(file_14)
#| message: false
file_13 <- "./data/13mype-cahb-tab1.xlsx"
pop13 <- get_pop(file_13, is_16 = 0)
pop13[, age := group_5yr][, age_cat := NULL]
pop13 <- make_groups(pop13, is_pop = 1)
rm(file_13)
#| message: false
file_12 <- "./data/12mype-cahb-tab1.xlsx"
pop12 <- get_pop(file_12, is_16 = 0)
pop12[, age := group_5yr][, age_cat := NULL]
pop12 <- make_groups(pop12, is_pop = 1)
rm(file_12)
#| message: false
#| code-line-numbers: false
#| code-summary: "convert single year population numbers to age categories"
source("./code/get-pop-by-year.R")
file_10 <- "./data/council-rebased-02-11-sya.xls"
sheet_10 <- "2010"
range_10 <- "C4:CO5"
pop10 <- get_pop_by_year(file_10, sheet_10, range_10)
pop10 <- make_groups(pop10, is_pop = 1)
# cleanup
rm(file_10, range_10, sheet_10)
pop_all <- ls()[sapply(ls(), function(x) is.data.frame(get(x)))]
save(list = pop_all, file = "./data-clean/scot-pop.RData")
# Cleanup the environment
# keep 'group5yr' vector containing age categories
remove(list = pop_all)
#| include: false
source("./code/get-mort-year.R")
#| message: false
file_year <- "./data/vital-events-22-ref-tabs-5.xlsx"
mort22 <- get_mort_year(file_year, group_5yr)
mort22 <- make_groups(mort22, is_pop = 0)
View(mort22)
View(mort22)
mort22[, year := 2022]
mort22
setcolorder(mort22, c("year", "age_cat", "mort"))
mort22
# Check that sum of age categories equals the recorded total
# in source data
total <- read_excel(file_year, sheet = 4,
range = "C6:C6")
# Check that sum of age categories equals the recorded total
# in source data
total <- read_excel(file_year, sheet = 4,
range = "C6:C6", col_names = FALSE)[[1]]
verify(mort22[, sum(mort)] == total)
verify(mort22, sum(mort) == total)
sum(mort)
source("./code/get-mort-year.R")
mort22 <- get_mort_year(file_year, group_5yr)
mort22 <- make_groups(mort22, is_pop = 0)
# Check that sum of age categories equals the recorded total
# in source data
total <- read_excel(file_year, sheet = 4,
range = "C6:C6", col_names = FALSE)[[1]]
verify(mort22, sum(mort) == total)
mort22[, year := 2022]
setcolorder(mort22, c("year", "age_cat", "mort"))
#| message: false
file_year <- "./data/vital-events-21-ref-tabs-5.xlsx"
mort21 <- get_mort_year(file_year, group_5yr)
mort21 <- make_groups(mort21, is_pop = 0)
# Check that sum of age categories equals the recorded total
# in source data
total <- read_excel(file_year, sheet = 4,
range = "C6:C6", col_names = FALSE)[[1]]
verify(mort21, sum(mort) == total)
mort22[, year := 2021]
setcolorder(mort21, c("year", "age_cat", "mort"))
file_year <- "./data/vital-events-22-ref-tabs-5.xlsx"
mort22 <- get_mort_year(file_year, group_5yr)
mort22 <- make_groups(mort22, is_pop = 0)
# Check that sum of age categories equals the recorded total
# in source data
total <- read_excel(file_year, sheet = 4,
range = "C6:C6", col_names = FALSE)[[1]]
verify(mort22, sum(mort) == total)
mort22[, year := 2022]
setcolorder(mort22, c("year", "age_cat", "mort"))
file_year <- "./data/vital-events-21-ref-tabs-5.xlsx"
mort21 <- get_mort_year(file_year, group_5yr)
mort21 <- make_groups(mort21, is_pop = 0)
# Check that sum of age categories equals the recorded total
# in source data
total <- read_excel(file_year, sheet = 4,
range = "C6:C6", col_names = FALSE)[[1]]
verify(mort21, sum(mort) == total)
mort21[, year := 2021]
setcolorder(mort21, c("year", "age_cat", "mort"))
file_year <- "./data/vital-events-20-ref-tabs-5.xlsx"
mort20 <- get_mort_year(file_year, group_5yr)
mort20 <- make_groups(mort20, is_pop = 0)
# Check that sum of age categories equals the recorded total
# in source data
total <- read_excel(file_year, sheet = 4,
range = "C6:C6", col_names = FALSE)[[1]]
verify(mort20, sum(mort) == total)
mort20[, year := 2020]
setcolorder(mort20, c("year", "age_cat", "mort"))
#| message: false
file_year <- "./data/vital-events-20-ref-tabs-5.xlsx"
mort20 <- get_mort_year(file_year, group_5yr)
mort20 <- make_groups(mort20, is_pop = 0)
# Check that sum of age categories equals the recorded total
# in source data
total <- read_excel(file_year, sheet = 4,
range = "C6:C6", col_names = FALSE)[[1]]
verify(mort20, sum(mort) == total)
mort20[, year := 2020]
setcolorder(mort20, c("year", "age_cat", "mort"))
#| message: false
file_year <- "./data/vital-events-19-ref-tabs-5.xlsx"
mort19 <- get_mort_year(file_year, group_5yr)
mort19 <- make_groups(mort19, is_pop = 0)
# Check that sum of age categories equals the recorded total
# in source data
total <- read_excel(file_year, sheet = 4,
range = "C6:C6", col_names = FALSE)[[1]]
verify(mort19, sum(mort) == total)
mort19[, year := 2019]
setcolorder(mort19, c("year", "age_cat", "mort"))
#| message: false
file_year <- "./data/vital-events-18-ref-tabs-5.xlsx"
mort18 <- get_mort_year(file_year, group_5yr)
mort18<- make_groups(mort18, is_pop = 0)
# Check that sum of age categories equals the recorded total
# in source data
total <- read_excel(file_year, sheet = 4,
range = "C6:C6", col_names = FALSE)[[1]]
verify(mort18, sum(mort) == total)
mort18[, year := 2018]
setcolorder(mort18, c("year", "age_cat", "mort"))
#| message: false
file_year <- "./data/vital-events-17-ref-tabs-5.xlsx"
mort17 <- get_mort_year(file_year, group_5yr)
mort17 <- make_groups(mort17, is_pop = 0)
# Check that sum of age categories equals the recorded total
# in source data
total <- read_excel(file_year, sheet = 4,
range = "C6:C6", col_names = FALSE)[[1]]
verify(mort17, sum(mort) == total)
mort17[, year := 2017]
setcolorder(mort17, c("year", "age_cat", "mort"))
#| message: false
source("./code/get-mort-5-2.R")
file_year <- "./data/vital-events-16-ref-tabs-5-2.xlsx"
mort16 <- get_mort_5_2(file_year, group_5yr)
mort16 <- make_groups(mort16, is_pop = 0)
# Check that sum of age categories equals the recorded total
# in source data
total <- read_excel(file_year, range = "C6:C6",
col_names = FALSE)[[1]]
verify(mort22, sum(mort) == total)
#'
#' @param file_year character. The name of the excel file.
#' Can include the path to the file.
#' Sheet "5.2" contains deaths by age
#' @param age_categories numeric vector. Each integer identifies
#' a specific 5-year age category
#' @usage get_mort_5_2(file_name, age_vector)
#' @return A data table with columns "age" and "mort"
#' giving the number of deaths in each age category
#'
scot_mort <- read_excel(file_year,
range = "D4:W6") |>
setDT()
# First row is blank / NAs
scot_mort <- scot_mort[2,]
# age category variable is spread across columns
# mortality values are stored in cell values as numbers
scot_mort <- scot_mort %>%
pivot_longer(
cols = 1:20,
names_to = "age-cat",
values_to = "mort") |>
# names_transform = readr::parse_number) |>
clean_names() |>
setDT()
scot_mort
age_categories <- group_5yr
# change age categories for compatibility with other tables
scot_mort[, age := age_categories][, age_cat := NULL]
scot_mort
setcolorder(scot_mort, c("age", "mort"))
setcolorder(mort16, c("year", "age_cat", "mort"))
make_groups(scot_mort, is_pop = 0)
View(mort16)
mort16[, sum(mort)]
mort16
verify(mort16, sum(mort) == total)
mort16[, year := 2016]
setcolorder(mort16, c("year", "age_cat", "mort"))
# Check that sum of age categories equals the recorded total
# in source data
total <- read_excel(file_year, range = "C6:C6",
col_names = FALSE)[[1]]
# Check that sum of age categories equals the recorded total
# in source data
total <- read_excel(file_year, range = "C6:C6",
col_names = FALSE)[[1]]
#| message: false
file_year <- "./data/vital-events-15-ref-tabs-5-2.xlsx"
mort15 <- get_mort_5_2(file_year, group_5yr)
mort15 <- make_groups(mort15, is_pop = 0)
# Check that sum of age categories equals the recorded total
# in source data
total <- read_excel(file_year, range = "C6:C6",
col_names = FALSE)[[1]]
verify(mort15, sum(mort) == total)
16 in range(10:16)
16 %in% range(10:16)
yr <- 16
# Check yr is within correct range
verify(yr %in% range(10:16))
# Check yr is within correct range
verify(yr, yr %in% range(10:16))
dplyr::between(yr, 10, 16)
# Check yr is within correct range
verify(yr, dplyr::between(yr, 10, 16))
# Check yr is within correct range
verify(dplyr::between(yr, 10, 16))
# Check yr is within correct range
assert(dplyr::between(yr, 10, 16))
# Check yr is within correct range
if(!(yr %in% range(10, 10)) ) {stop()}
if(!(yr %in% range(10, 10)) ) {stop()}
yr
yr &in& range(10, 16)
yr %in% range(10, 16)
!(yr %in% range(10, 16))
