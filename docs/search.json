[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Change in Mortality Rates for Scotland",
    "section": "",
    "text": "Population sub-group wave moving to older age categories."
  },
  {
    "objectID": "index.html#Population",
    "href": "index.html#Population",
    "title": "Change in Mortality Rates for Scotland",
    "section": "",
    "text": "Population sub-group wave moving to older age categories."
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "Change in Mortality Rates for Scotland",
    "section": "Welcome",
    "text": "Welcome\nIt’s possible to create beautiful documentation to share online with Quarto that auto-updates with GitHub. This is very new and incredibly cool. This tutorial is an example of a quarto website — it is a really powerful way to create and share your work. You can communicate about science using the same reproducible workflow you and/or your colleagues use for analyses, whether or not you write code.\nCreating websites with Quarto can be done without knowing R, Python or HTML, CSS, etc, and that’s where we’ll start. However, Quarto integrates with these tools so you can make your websites as complex and beautiful as you like as you see examples and reuse and remix from others in the open community. This tutorial borrows heavily from a lot of great tutorials and resources you should check out too – there are links throughout."
  },
  {
    "objectID": "index.html#what-is-quarto",
    "href": "index.html#what-is-quarto",
    "title": "Change in Mortality Rates for Scotland",
    "section": "What is Quarto?",
    "text": "What is Quarto?\nQuarto helps you have your ideas and your code in one place, and present it in a beautiful way.\nQuarto unifies and extends the RMarkdown ecosystem - it unifies by combining the functionality of R Markdown, bookdown, distill, xaringian, etc into a single consistent system. And it extends in several ways: all features are possible beyond R too, including Python and Javascript. It also has more “guardrails”: accessibility and inclusion are centered in the design. Quarto is for people who love RMarkdown, and it’s for people who have never used RMarkdown.\nThe ability for Quarto to streamline collaboration has been so cool and important for our NASA Openscapes project. Quarto has been a common place for us to collaborate - across R and Python languages and coding expertise."
  },
  {
    "objectID": "index.html#what-is-this-tutorial",
    "href": "index.html#what-is-this-tutorial",
    "title": "Change in Mortality Rates for Scotland",
    "section": "What is this tutorial?",
    "text": "What is this tutorial?\nThis is a 1-hour tutorial that can be used to teach or as self-paced learning.\nWe introduce Quarto by exploring this tutorial website, and practicing the basic Quarto workflow using different tools (GitHub browser, RStudio, and Jupyter) for editing your website.\nWe’ll start off from the browser so you don’t need to install any additional software, however this approach is very limited and you will soon outgrow its capabilities. If you don’t already have a workflow to edit files and sync to GitHub from your computer, I recommend RStudio. You don’t need to know R to use RStudio, and it has powerful editor features that make for happy workflows.\nQuarto.org is the go-to place for full documentation and more tutorials!"
  },
  {
    "objectID": "index.html#example-quarto-sites",
    "href": "index.html#example-quarto-sites",
    "title": "Change in Mortality Rates for Scotland",
    "section": "Example Quarto sites",
    "text": "Example Quarto sites\nA few Quarto websites from Openscapes - so far we have been using Quarto for documentation using Quarto and Markdown files and Jupyter Notebooks.\n\nChampions Lessons Series\nOpenscapes Approach Guide\n\n2021 NASA Cloud Hackathon\nFaylab Lab Manual\nA Quarto tip a day, by Mine Çetinkaya-Rundel"
  },
  {
    "objectID": "index.html#about",
    "href": "index.html#about",
    "title": "Change in Mortality Rates for Scotland",
    "section": "About",
    "text": "About\nOpenscapes is about better science for future us. We help researchers reimagine data analysis, develop modern skills that are of immediate value to them, and cultivate collaborative and inclusive research teams as part of the broader global open movement.\nWe’re developing this tutorial to help folks with different levels of technical skills use Quarto for documentation and tutorial building. This tutorial was originally created for several different audiences: NASA-Openscapes researcher support engineers using Python, communications directors at organizations promoting open science who do not identify as coders, and fisheries scientists curious about transitioning from RMarkdown. We’re hoping it’s useful to folks with backgrounds as wide as these; if you find it useful or have suggestions for improvement, please let us know by clicking “Edit this page” or “Report an issue” at the upper right side of any page."
  },
  {
    "objectID": "data-sources.html",
    "href": "data-sources.html",
    "title": "Data Sources",
    "section": "",
    "text": "Scotland’s Census\nScotland’s Census, 2022\nScotland’s Census, 2011\nNational Records of Scotland:\nMid-Year Population Estimates 2021, 2020\nMid-Year Population Estimates, Archive 2019-2012\n\n\n\nNational Records of Scotland, Vital Events 2022\nSection 5 contains mortality by age\nVital Events Reference Tables 2021\nVital Events Archive - Historical data back to 2001"
  },
  {
    "objectID": "data-sources.html#census-and-statistics-service-of-scotland",
    "href": "data-sources.html#census-and-statistics-service-of-scotland",
    "title": "Data Sources",
    "section": "",
    "text": "Scotland’s Census\nScotland’s Census, 2022\nScotland’s Census, 2011\nNational Records of Scotland:\nMid-Year Population Estimates 2021, 2020\nMid-Year Population Estimates, Archive 2019-2012\n\n\n\nNational Records of Scotland, Vital Events 2022\nSection 5 contains mortality by age\nVital Events Reference Tables 2021\nVital Events Archive - Historical data back to 2001"
  },
  {
    "objectID": "getting-cleaning-data.html",
    "href": "getting-cleaning-data.html",
    "title": "Getting and Cleaning Data",
    "section": "",
    "text": "In the source data, year of age and population numbers are stored in multiple columns:\n\n\n\nCode\nsource(\"./code/get-pop.R\")\nfile_year &lt;- \"./data/mid-year-pop-est-19-data.xlsx\" \nscot_pop19 &lt;- get_pop_year(file_year)\n\n\n\n total:  5463300 \n sum of pop categories:  5463300\n\n\nCode\nage_categories &lt;- scot_pop19[, age_cat]\n\n\n\n\n\n\n\nCode\n# Table 3 contains Population by age category\nscot_pop22 &lt;- read_excel(\"./data/scotland-s-census-2022-first-results-rounded-population-estimates-data.xlsx\", \n                         sheet = \"Table 3\",\n                         skip = 3, n_max = 3) |&gt; \n    setDT()\n# First 3 columns are superfluous\nscot_pop22[, c(\"Area name\", \"Area code\", \"Area type\" ) := NULL]\n# remove \"All ages\" column and calculate totals after processing\nscot_pop22[, \"All ages\" := NULL]\nscot_pop22 |&gt; \n    kable()\n\n\n\n\n\nSex\nAged 0-4 years\nAged 5-9 year\nAged 10-14 years\nAged 15-19 years\nAged 20-24 years\nAged 25-29 years\nAged 30-34 years\nAged 35-39 years\nAged 40-44 years\nAged 45-49 years\nAged 50-54 years\nAged 55-59 years\nAged 60-64 years\nAged 65-69 years\nAged 70-74 years\nAged 75-79 years\nAged 80-84 years\nAged 85-89 years\nAged 90+ years\n\n\n\n\nPersons\n247100\n284100\n301000\n299100\n337000\n338200\n356000\n347000\n334300\n329500\n391500\n408600\n372100\n315300\n284800\n218300\n142300\n85400\n45000\n\n\nFemales\n120100\n138300\n147200\n146000\n170500\n172300\n182600\n178200\n171200\n169000\n202400\n210400\n191200\n163300\n149300\n118500\n81900\n52400\n29800\n\n\nMales\n127000\n145800\n153900\n153000\n166400\n166000\n173400\n168800\n163100\n160500\n189100\n198200\n180900\n152000\n135400\n99800\n60300\n33100\n15200\n\n\n\n\n\n\n\nThis data has three variables:\n\nSex, stored in the rows,\nage_category spread across the column names, and\npopulation numbers are stored in the cell values.\n\n\n\nCode\nscot_pop22 &lt;- scot_pop22 %&gt;%    \n    pivot_longer(     \n        cols = !Sex, # reshape every column apart from \"Sex\" \n        names_to = \"age\",      \n        values_to = \"pop\",\n        names_transform = readr::parse_number) |&gt; \n    clean_names() |&gt; \n    setDT()\nhead( scot_pop22 )\n\n\n       sex age    pop\n1: Persons   0 247100\n2: Persons   5 284100\n3: Persons  10 301000\n4: Persons  15 299100\n5: Persons  20 337000\n6: Persons  25 338200\n\n\n\nThere are 19 age categories in 5 year intervals.\nThe last entry is for 90 years and older.\nsex has three categories: Persons, Males, Females.\n\nSeparate the combined counts, which is given by the “Person” entries in the sex variable\n\n\nCode\n# store Male and Female values for later analysis \n# scot_pop22_MF &lt;- scot_pop22[sex %in% c(\"Males\",\"Females\") ,]\n\n# All Persons\nscot_pop22 &lt;- scot_pop22[sex == \"Persons\" ,]  \n\n# no longer need the \"sex\" variable\nscot_pop22[, sex := NULL]\n\n# add 'age_cat' column for compatibility with other years\nscot_pop22[, age_cat := age_categories][, age := NULL]\nsetcolorder(scot_pop22, c(\"age_cat\", \"pop\"))\n\n\nPlot population counts by age category\n\n\nCode\n# suppress scientific notation\noptions(scipen=20)  \nlibrary(scales)\n\nggplot(scot_pop22, aes(age_cat, pop)) + \n  geom_col(aes(fill = pop)) +\n  scale_fill_gradient(low = \"white\", high = \"darkblue\") +\n  labs(title = \"Scotland Population 2022\",\n       subtitle = \"by 5-year age category\",\n       x = \"Age 5yr\", y = \"Population\") +\n  scale_y_continuous(labels = scales::label_comma()) +\n  theme(legend.position = \"none\") +\n    coord_flip()\n\n\n\n\n\n\n\n\n\n\nCode\n# Table 1 contains Population by each year of \nscot_pop21 &lt;- read_excel(\"./data/mid-year-pop-est-21-data.xlsx\", \n                         sheet = \"Table 1\",\n                         skip = 3, n_max = 3) |&gt; \n#    clean_names() |&gt; \n    setDT()\n# First 3 columns are superfluous\nscot_pop21[, c(\"Area name\", \"Area code\", \"Area type\" ) := NULL]\n# remove \"All ages\" column and calculate totals after processing\nscot_pop21[, \"All ages\" := NULL]\n\n\nInspect the Data\n\n\nCode\nscot_pop21[, 1:10]\n\n\n       Sex     0     1     2     3     4     5     6     7     8\n1: Persons 46782 49017 51478 53317 54843 57070 57945 58262 59490\n2:   Males 23961 25131 26485 27398 28339 29530 29710 29948 30459\n3: Females 22821 23886 24993 25919 26504 27540 28235 28314 29031\n\n\nCheck the final column\n\n\nCode\nscot_pop21[, 92]\n\n\n     90+\n1: 45321\n2: 14421\n3: 30900\n\n\nThis data has three variables:\n\nSex, stored in the rows,\nage spread across the column names, and\npopulation numbers are stored in the cell values.\n\npivot_longer:\n\nnames_to gives the name of the variable that will be created from the data stored in the column names, i.e. year of age\nvalues_to gives the name of the variable that will be created from the data stored in the cell value, i.e. population count\n\nEntries in the age column are in character format. readr::parse_number() extracts numeric values and automatically strips non-numeric components, so it can deal with the “90+” entry\n\n\nCode\nscot_pop21 &lt;- scot_pop21 %&gt;%    \n    pivot_longer(     \n        cols = !Sex, # reshape every column apart from \"Sex\" \n        names_to = \"age\",      \n        values_to = \"pop\",\n        names_transform = readr::parse_number) |&gt; \n    clean_names() |&gt; \n    setDT()\n\n\nSeparate the combined counts, which is given by the “Person” entries in the sex variable\n\n\nCode\n# store Male and Female values for later analysis\n# scot_pop21_MF &lt;- scot_pop21[sex %in% c(\"Males\",\"Females\") ,]\n\n# counts for male + female\nscot_pop21 &lt;- scot_pop21[sex == \"Persons\" ,]\n\n\nNeed to combine rows of age to 5-year age categories and to sum the associated population numbers. Bear in mind that the “90” entry refers to ages 90 and above. This means that there will be 18 age categories with an additional one for over 90.\n\n\nCode\n# \"sex\" column is no longer needed\nscot_pop21[, sex := NULL]\nover90 &lt;- scot_pop21[91, pop]\nscot_pop21 &lt;- scot_pop21[-91,]\n\n# Create a grouping variable\nscot_pop21[, age_cat := cut2(age, g = 18)]\n\n# sum the number of deaths in each age category\nscot_pop21_cats &lt;- scot_pop21[, sum(pop), by = age_cat]\nscot_pop21_cats[, pop := V1][, V1 := NULL]\n\n# append an entry for the 90 plus group\noldest &lt;- data.table(age_cat = as.factor(\"90 plus\"), \n                     pop = over90)\nscot_pop21 &lt;- rbind(scot_pop21_cats, oldest)\n\n# update \"age_cat\" column for compatibility with other years\nscot_pop21[, age_cat := age_categories]\n\nrm(scot_pop21_cats, oldest, over90)\n\n\n\n\n\n\n\nCode\nfile_year &lt;- \"./data/mid-year-pop-est-18-tabs.xlsx\" \n\nscot_pop18 &lt;- get_pop_year(file_year)\n\n\n\n total:  5438100 \n sum of pop categories:  5438100\n\n\n\n\n\n\n\nCode\nfile_year &lt;- \"./data/mid-year-pop-est-17-all-tables-revised.xlsx\" \n\nscot_pop17 &lt;- get_pop_year(file_year)\n\n\n\n total:  5424800 \n sum of pop categories:  5424800\n\n\n\n\n\n\n\nCode\nsource(\"./code/get-pop-16.R\")\nfile_year &lt;- \"./data/16-mid-year-pe-tab1.xlsx\" \n\nscot_pop16 &lt;- get_pop_2016(file_year)\n\n\n\n total:  5404700 \n  sum of pop categories:  5404700\n\n\n\n\n\n\n\nCode\nfile_year &lt;- \"./data/15mype-cahb-tab1.xlsx\" \n\nscot_pop15 &lt;- get_pop_year(file_year)\n\n\n\n total:  5373000 \n sum of pop categories:  5373000\n\n\n\n\n\n\n\nCode\nfile_year &lt;- \"./data/14mype-cahb-all-tab.xlsx\"  \n\nscot_pop14 &lt;- get_pop_year(file_year)\n\n\n\n total:  5347600 \n sum of pop categories:  5347600\n\n\n\n\n\n\n\nCode\nfile_year &lt;- \"./data/13mype-cahb-tab1.xlsx\"  \n\nscot_pop13 &lt;- get_pop_year(file_year)\n\n\n\n total:  5327700 \n sum of pop categories:  5327700\n\n\n\n\n\n\n\nCode\nfile_year &lt;- \"./data/12mype-cahb-tab1.xlsx\"  \n\nscot_pop12 &lt;- get_pop_year(file_year)\n\n\n\n total:  5313600 \n sum of pop categories:  5313600\n\n\n\n\n\nInspect the Data\n\n\nCode\n# File contains a single sheet\nscot_pop11 &lt;- read_excel(\"./data/scotland-census-2011.xlsx\", \n                         sheet = \"Data Sheet 0\",\n                         skip = 10, n_max = 3) |&gt; \n    setDT()\n\n# Second columns is superfluous\nscot_pop11[, c(\"...2\" ) := NULL]\n\n# remove \"All people\" column and calculate totals after processing\nscot_pop11[, c(\"All people\", \"Age\") := NULL]\n# remove second row since it contains NAs\nscot_pop11 &lt;- scot_pop11[2, ]\nscot_pop11 |&gt; \n    kable()\n\n\n\n\n\nUnder 1\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100 and over\n\n\n\n\n58715\n59556\n58909\n58764\n56877\n55224\n55236\n53786\n52325\n53046\n55067\n56769\n58656\n59971\n61152\n62278\n62145\n64121\n68130\n74152\n74835\n72001\n72969\n73783\n70352\n70288\n69246\n67813\n68342\n69943\n69202\n67429\n64193\n60491\n60380\n63609\n64355\n66397\n70159\n75536\n76562\n76474\n79587\n80953\n81122\n81314\n84376\n82601\n82554\n80084\n78847\n75598\n75660\n73955\n71767\n69190\n67232\n66128\n64782\n63559\n63996\n64709\n66339\n70598\n70880\n53361\n55060\n54012\n51495\n47270\n45155\n46168\n44637\n43297\n41337\n39583\n37832\n35211\n33146\n32342\n30065\n27162\n25170\n21669\n20459\n18626\n15898\n14181\n12024\n10778\n9439\n6975\n4331\n3321\n2840\n2241\n1825\n1174\n857\n539\n854\n\n\n\n\n\n\n\nThis data has two variables:\n\nage spread across the column names, and\npopulation numbers are stored in the cell values.\n\nNeed to pivot_longer to create age column and to transpose age values from row to column format.\n\n\nCode\n# Rename \"Under 1\" column to \"0\" \n# to represent first year of life\nsetnames(scot_pop11, \"Under 1\", \"0\")\n\nscot_pop11 &lt;- scot_pop11 %&gt;%    \n    pivot_longer(   \n        cols = \"0\":\"100 and over\",\n        names_to = \"age\",      \n        values_to = \"pop\",\n        names_transform = readr::parse_number) |&gt; \n    clean_names() |&gt; \n    setDT()\nhead(scot_pop11, 10) \n\n\n    age   pop\n 1:   0 58715\n 2:   1 59556\n 3:   2 58909\n 4:   3 58764\n 5:   4 56877\n 6:   5 55224\n 7:   6 55236\n 8:   7 53786\n 9:   8 52325\n10:   9 53046\n\n\nAggregate rows for ages 90 and above into a single entry for compatibility with data for 2022 and 2021.\n\n\nCode\nover90 &lt;- scot_pop11[91:101, sum(pop)]\n# remove rows for age 90 and above\nscot_pop11 &lt;- scot_pop11[1:90, ]\n\n\nCombine rows into 5-year age categories\n\n\nCode\n# Create a grouping variable\nscot_pop11[, age_cat := cut2(age, g = 18)]\n\n# sum the number of deaths in each age category\nscot_pop11_cats &lt;- scot_pop11[, sum(pop), by = age_cat]\n\nscot_pop11_cats[, pop := V1][, V1 := NULL]\n\n# append an entry for the 90 plus group\noldest &lt;- data.table(age_cat = as.factor(\"90 plus\"), \n                     pop = over90)\nscot_pop11 &lt;- rbind(scot_pop11_cats, oldest)\n\n# update \"age_cat\" for compatibility with other years\nscot_pop11[, age_cat := age_categories]\n \n# Cleanup\nrm(scot_pop11_cats, oldest, over90)\n\n\nSave cleaned data tables\n\n\nCode\nscot_all &lt;- ls()[sapply(ls(), function(x) is.data.frame(get(x)))]\n\nsave(list = scot_all, file = \"./data-clean/scot-pop.RData\")\n\n# Cleanup the environment\n# keep 'age_categories' vector\nremove(list = scot_all)\nrm(get_pop_2016, get_pop_year, file_year, scot_all)"
  },
  {
    "objectID": "getting-cleaning-data.html#population",
    "href": "getting-cleaning-data.html#population",
    "title": "Getting and Cleaning Data",
    "section": "",
    "text": "In the source data, year of age and population numbers are stored in multiple columns:\n\n\n\nCode\nsource(\"./code/get-pop.R\")\nfile_year &lt;- \"./data/mid-year-pop-est-19-data.xlsx\" \nscot_pop19 &lt;- get_pop_year(file_year)\n\n\n\n total:  5463300 \n sum of pop categories:  5463300\n\n\nCode\nage_categories &lt;- scot_pop19[, age_cat]\n\n\n\n\n\n\n\nCode\n# Table 3 contains Population by age category\nscot_pop22 &lt;- read_excel(\"./data/scotland-s-census-2022-first-results-rounded-population-estimates-data.xlsx\", \n                         sheet = \"Table 3\",\n                         skip = 3, n_max = 3) |&gt; \n    setDT()\n# First 3 columns are superfluous\nscot_pop22[, c(\"Area name\", \"Area code\", \"Area type\" ) := NULL]\n# remove \"All ages\" column and calculate totals after processing\nscot_pop22[, \"All ages\" := NULL]\nscot_pop22 |&gt; \n    kable()\n\n\n\n\n\nSex\nAged 0-4 years\nAged 5-9 year\nAged 10-14 years\nAged 15-19 years\nAged 20-24 years\nAged 25-29 years\nAged 30-34 years\nAged 35-39 years\nAged 40-44 years\nAged 45-49 years\nAged 50-54 years\nAged 55-59 years\nAged 60-64 years\nAged 65-69 years\nAged 70-74 years\nAged 75-79 years\nAged 80-84 years\nAged 85-89 years\nAged 90+ years\n\n\n\n\nPersons\n247100\n284100\n301000\n299100\n337000\n338200\n356000\n347000\n334300\n329500\n391500\n408600\n372100\n315300\n284800\n218300\n142300\n85400\n45000\n\n\nFemales\n120100\n138300\n147200\n146000\n170500\n172300\n182600\n178200\n171200\n169000\n202400\n210400\n191200\n163300\n149300\n118500\n81900\n52400\n29800\n\n\nMales\n127000\n145800\n153900\n153000\n166400\n166000\n173400\n168800\n163100\n160500\n189100\n198200\n180900\n152000\n135400\n99800\n60300\n33100\n15200\n\n\n\n\n\n\n\nThis data has three variables:\n\nSex, stored in the rows,\nage_category spread across the column names, and\npopulation numbers are stored in the cell values.\n\n\n\nCode\nscot_pop22 &lt;- scot_pop22 %&gt;%    \n    pivot_longer(     \n        cols = !Sex, # reshape every column apart from \"Sex\" \n        names_to = \"age\",      \n        values_to = \"pop\",\n        names_transform = readr::parse_number) |&gt; \n    clean_names() |&gt; \n    setDT()\nhead( scot_pop22 )\n\n\n       sex age    pop\n1: Persons   0 247100\n2: Persons   5 284100\n3: Persons  10 301000\n4: Persons  15 299100\n5: Persons  20 337000\n6: Persons  25 338200\n\n\n\nThere are 19 age categories in 5 year intervals.\nThe last entry is for 90 years and older.\nsex has three categories: Persons, Males, Females.\n\nSeparate the combined counts, which is given by the “Person” entries in the sex variable\n\n\nCode\n# store Male and Female values for later analysis \n# scot_pop22_MF &lt;- scot_pop22[sex %in% c(\"Males\",\"Females\") ,]\n\n# All Persons\nscot_pop22 &lt;- scot_pop22[sex == \"Persons\" ,]  \n\n# no longer need the \"sex\" variable\nscot_pop22[, sex := NULL]\n\n# add 'age_cat' column for compatibility with other years\nscot_pop22[, age_cat := age_categories][, age := NULL]\nsetcolorder(scot_pop22, c(\"age_cat\", \"pop\"))\n\n\nPlot population counts by age category\n\n\nCode\n# suppress scientific notation\noptions(scipen=20)  \nlibrary(scales)\n\nggplot(scot_pop22, aes(age_cat, pop)) + \n  geom_col(aes(fill = pop)) +\n  scale_fill_gradient(low = \"white\", high = \"darkblue\") +\n  labs(title = \"Scotland Population 2022\",\n       subtitle = \"by 5-year age category\",\n       x = \"Age 5yr\", y = \"Population\") +\n  scale_y_continuous(labels = scales::label_comma()) +\n  theme(legend.position = \"none\") +\n    coord_flip()\n\n\n\n\n\n\n\n\n\n\nCode\n# Table 1 contains Population by each year of \nscot_pop21 &lt;- read_excel(\"./data/mid-year-pop-est-21-data.xlsx\", \n                         sheet = \"Table 1\",\n                         skip = 3, n_max = 3) |&gt; \n#    clean_names() |&gt; \n    setDT()\n# First 3 columns are superfluous\nscot_pop21[, c(\"Area name\", \"Area code\", \"Area type\" ) := NULL]\n# remove \"All ages\" column and calculate totals after processing\nscot_pop21[, \"All ages\" := NULL]\n\n\nInspect the Data\n\n\nCode\nscot_pop21[, 1:10]\n\n\n       Sex     0     1     2     3     4     5     6     7     8\n1: Persons 46782 49017 51478 53317 54843 57070 57945 58262 59490\n2:   Males 23961 25131 26485 27398 28339 29530 29710 29948 30459\n3: Females 22821 23886 24993 25919 26504 27540 28235 28314 29031\n\n\nCheck the final column\n\n\nCode\nscot_pop21[, 92]\n\n\n     90+\n1: 45321\n2: 14421\n3: 30900\n\n\nThis data has three variables:\n\nSex, stored in the rows,\nage spread across the column names, and\npopulation numbers are stored in the cell values.\n\npivot_longer:\n\nnames_to gives the name of the variable that will be created from the data stored in the column names, i.e. year of age\nvalues_to gives the name of the variable that will be created from the data stored in the cell value, i.e. population count\n\nEntries in the age column are in character format. readr::parse_number() extracts numeric values and automatically strips non-numeric components, so it can deal with the “90+” entry\n\n\nCode\nscot_pop21 &lt;- scot_pop21 %&gt;%    \n    pivot_longer(     \n        cols = !Sex, # reshape every column apart from \"Sex\" \n        names_to = \"age\",      \n        values_to = \"pop\",\n        names_transform = readr::parse_number) |&gt; \n    clean_names() |&gt; \n    setDT()\n\n\nSeparate the combined counts, which is given by the “Person” entries in the sex variable\n\n\nCode\n# store Male and Female values for later analysis\n# scot_pop21_MF &lt;- scot_pop21[sex %in% c(\"Males\",\"Females\") ,]\n\n# counts for male + female\nscot_pop21 &lt;- scot_pop21[sex == \"Persons\" ,]\n\n\nNeed to combine rows of age to 5-year age categories and to sum the associated population numbers. Bear in mind that the “90” entry refers to ages 90 and above. This means that there will be 18 age categories with an additional one for over 90.\n\n\nCode\n# \"sex\" column is no longer needed\nscot_pop21[, sex := NULL]\nover90 &lt;- scot_pop21[91, pop]\nscot_pop21 &lt;- scot_pop21[-91,]\n\n# Create a grouping variable\nscot_pop21[, age_cat := cut2(age, g = 18)]\n\n# sum the number of deaths in each age category\nscot_pop21_cats &lt;- scot_pop21[, sum(pop), by = age_cat]\nscot_pop21_cats[, pop := V1][, V1 := NULL]\n\n# append an entry for the 90 plus group\noldest &lt;- data.table(age_cat = as.factor(\"90 plus\"), \n                     pop = over90)\nscot_pop21 &lt;- rbind(scot_pop21_cats, oldest)\n\n# update \"age_cat\" column for compatibility with other years\nscot_pop21[, age_cat := age_categories]\n\nrm(scot_pop21_cats, oldest, over90)\n\n\n\n\n\n\n\nCode\nfile_year &lt;- \"./data/mid-year-pop-est-18-tabs.xlsx\" \n\nscot_pop18 &lt;- get_pop_year(file_year)\n\n\n\n total:  5438100 \n sum of pop categories:  5438100\n\n\n\n\n\n\n\nCode\nfile_year &lt;- \"./data/mid-year-pop-est-17-all-tables-revised.xlsx\" \n\nscot_pop17 &lt;- get_pop_year(file_year)\n\n\n\n total:  5424800 \n sum of pop categories:  5424800\n\n\n\n\n\n\n\nCode\nsource(\"./code/get-pop-16.R\")\nfile_year &lt;- \"./data/16-mid-year-pe-tab1.xlsx\" \n\nscot_pop16 &lt;- get_pop_2016(file_year)\n\n\n\n total:  5404700 \n  sum of pop categories:  5404700\n\n\n\n\n\n\n\nCode\nfile_year &lt;- \"./data/15mype-cahb-tab1.xlsx\" \n\nscot_pop15 &lt;- get_pop_year(file_year)\n\n\n\n total:  5373000 \n sum of pop categories:  5373000\n\n\n\n\n\n\n\nCode\nfile_year &lt;- \"./data/14mype-cahb-all-tab.xlsx\"  \n\nscot_pop14 &lt;- get_pop_year(file_year)\n\n\n\n total:  5347600 \n sum of pop categories:  5347600\n\n\n\n\n\n\n\nCode\nfile_year &lt;- \"./data/13mype-cahb-tab1.xlsx\"  \n\nscot_pop13 &lt;- get_pop_year(file_year)\n\n\n\n total:  5327700 \n sum of pop categories:  5327700\n\n\n\n\n\n\n\nCode\nfile_year &lt;- \"./data/12mype-cahb-tab1.xlsx\"  \n\nscot_pop12 &lt;- get_pop_year(file_year)\n\n\n\n total:  5313600 \n sum of pop categories:  5313600\n\n\n\n\n\nInspect the Data\n\n\nCode\n# File contains a single sheet\nscot_pop11 &lt;- read_excel(\"./data/scotland-census-2011.xlsx\", \n                         sheet = \"Data Sheet 0\",\n                         skip = 10, n_max = 3) |&gt; \n    setDT()\n\n# Second columns is superfluous\nscot_pop11[, c(\"...2\" ) := NULL]\n\n# remove \"All people\" column and calculate totals after processing\nscot_pop11[, c(\"All people\", \"Age\") := NULL]\n# remove second row since it contains NAs\nscot_pop11 &lt;- scot_pop11[2, ]\nscot_pop11 |&gt; \n    kable()\n\n\n\n\n\nUnder 1\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100 and over\n\n\n\n\n58715\n59556\n58909\n58764\n56877\n55224\n55236\n53786\n52325\n53046\n55067\n56769\n58656\n59971\n61152\n62278\n62145\n64121\n68130\n74152\n74835\n72001\n72969\n73783\n70352\n70288\n69246\n67813\n68342\n69943\n69202\n67429\n64193\n60491\n60380\n63609\n64355\n66397\n70159\n75536\n76562\n76474\n79587\n80953\n81122\n81314\n84376\n82601\n82554\n80084\n78847\n75598\n75660\n73955\n71767\n69190\n67232\n66128\n64782\n63559\n63996\n64709\n66339\n70598\n70880\n53361\n55060\n54012\n51495\n47270\n45155\n46168\n44637\n43297\n41337\n39583\n37832\n35211\n33146\n32342\n30065\n27162\n25170\n21669\n20459\n18626\n15898\n14181\n12024\n10778\n9439\n6975\n4331\n3321\n2840\n2241\n1825\n1174\n857\n539\n854\n\n\n\n\n\n\n\nThis data has two variables:\n\nage spread across the column names, and\npopulation numbers are stored in the cell values.\n\nNeed to pivot_longer to create age column and to transpose age values from row to column format.\n\n\nCode\n# Rename \"Under 1\" column to \"0\" \n# to represent first year of life\nsetnames(scot_pop11, \"Under 1\", \"0\")\n\nscot_pop11 &lt;- scot_pop11 %&gt;%    \n    pivot_longer(   \n        cols = \"0\":\"100 and over\",\n        names_to = \"age\",      \n        values_to = \"pop\",\n        names_transform = readr::parse_number) |&gt; \n    clean_names() |&gt; \n    setDT()\nhead(scot_pop11, 10) \n\n\n    age   pop\n 1:   0 58715\n 2:   1 59556\n 3:   2 58909\n 4:   3 58764\n 5:   4 56877\n 6:   5 55224\n 7:   6 55236\n 8:   7 53786\n 9:   8 52325\n10:   9 53046\n\n\nAggregate rows for ages 90 and above into a single entry for compatibility with data for 2022 and 2021.\n\n\nCode\nover90 &lt;- scot_pop11[91:101, sum(pop)]\n# remove rows for age 90 and above\nscot_pop11 &lt;- scot_pop11[1:90, ]\n\n\nCombine rows into 5-year age categories\n\n\nCode\n# Create a grouping variable\nscot_pop11[, age_cat := cut2(age, g = 18)]\n\n# sum the number of deaths in each age category\nscot_pop11_cats &lt;- scot_pop11[, sum(pop), by = age_cat]\n\nscot_pop11_cats[, pop := V1][, V1 := NULL]\n\n# append an entry for the 90 plus group\noldest &lt;- data.table(age_cat = as.factor(\"90 plus\"), \n                     pop = over90)\nscot_pop11 &lt;- rbind(scot_pop11_cats, oldest)\n\n# update \"age_cat\" for compatibility with other years\nscot_pop11[, age_cat := age_categories]\n \n# Cleanup\nrm(scot_pop11_cats, oldest, over90)\n\n\nSave cleaned data tables\n\n\nCode\nscot_all &lt;- ls()[sapply(ls(), function(x) is.data.frame(get(x)))]\n\nsave(list = scot_all, file = \"./data-clean/scot-pop.RData\")\n\n# Cleanup the environment\n# keep 'age_categories' vector\nremove(list = scot_all)\nrm(get_pop_2016, get_pop_year, file_year, scot_all)"
  },
  {
    "objectID": "getting-cleaning-data.html#mortality",
    "href": "getting-cleaning-data.html#mortality",
    "title": "Getting and Cleaning Data",
    "section": "Mortality",
    "text": "Mortality\nTable 5.02 contains deaths, by sex, age, and administrative area, Scotland\n\n2022\n\n\nCode\nfile_year &lt;- \"./data/vital-events-22-ref-tabs-5.xlsx\"\nscot_mort22 &lt;- get_mort_year(file_year)\n\n\n\n\n2021\n\n\nCode\nfile_year &lt;- \"./data/vital-events-21-ref-tabs-5.xlsx\"\nscot_mort21 &lt;- get_mort_year(file_year)\n\n\n\n\n2020\n\n\nCode\nfile_year &lt;- \"./data/vital-events-20-ref-tabs-5.xlsx\"\nscot_mort20 &lt;- get_mort_year(file_year)\n\n\n\n\n2019\n\n\nCode\nfile_year &lt;- \"./data/vital-events-19-ref-tabs-5.xlsx\"\nscot_mort19 &lt;- get_mort_year(file_year)\n\n\n\n\n2018\n\n\nCode\nfile_year &lt;- \"./data/vital-events-18-ref-tabs-5.xlsx\"\nscot_mort18 &lt;- get_mort_year(file_year)\n\n\n\n\n2017\n\n\nCode\nfile_year &lt;- \"./data/vital-events-17-ref-tabs-5.xlsx\"\nscot_mort17 &lt;- get_mort_year(file_year)\n\n\n\n\n2016\n\n\nCode\nsource(\"./code/get-mort-5-2.R\")\nfile_year &lt;- \"./data/vital-events-16-ref-tabs-5-2.xlsx\"\nscot_mort16 &lt;- get_mort_5_2(file_year)\n\n\n\n\n2015\n\n\nCode\nfile_year &lt;- \"./data/vital-events-15-ref-tabs-5-2.xlsx\"\nscot_mort15 &lt;- get_mort_5_2(file_year)\n\n\n\n\n2014\n\n\nCode\nfile_year &lt;- \"./data/vital-events-14-ref-tabs-5-2.xlsx\"\nscot_mort14 &lt;- get_mort_5_2(file_year)\n\n\n\n\n2013\n\n\nCode\nfile_year &lt;- \"./data/vital-events-13-ref-tabs-5-2.xls\"\nscot_mort13 &lt;- get_mort_5_2(file_year)\n\n\n\n\n2012\n\n\nCode\nfile_year &lt;- \"./data/vital-events-12-ref-tabs-5-2.xls\"\nscot_mort12 &lt;- get_mort_5_2(file_year)\n\n\n\n\n2011\n\n\nCode\nfile_year &lt;- \"./data/vital-events-11-ref-tabs-5-2.xls\"\nscot_mort11 &lt;- get_mort_5_2(file_year)\n\n\nSave data tables that are in “tidy data” format\n\n\nCode\nmort_all &lt;- ls()[sapply(ls(), function(x) is.data.frame(get(x)))]\n\nsave(list = mort_all, file = \"./data-clean/scot-mort.RData\")\n\n# Cleanup the environment\n# keep 'age_categories' vector\nremove(list = mort_all)\nrm(get_mort_year, get_mort_5_2, file_year, mort_all)"
  }
]