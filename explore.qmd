---
title: "Exploratory Data Analysis"
author: "JJC"
format: 
    html:
        toc: true
        toc-depth: 2
        toc-title: Table of contents
        # number-sections: true
        code-fold: true
        highlight-style: github
editor: visual
---

## Mortality Rates

```{r}
#| include: false
#| label: load_libraries

library(data.table)
library(kableExtra)
library(gt)
library(tidyverse)
library(ggpubr)
library(gridExtra)
library(grid)
library(gridtext)   # textGrob
library(plotly)
library(janitor)
library(tidyr)
library(purrr)
```

### Mortality rate by age category

Calculate mortality rates per 10,000 persons for each age category

```{r}
#| include: false
#| 

scot_mort <- readRDS(file = "./processed-data/scot_mort.rds") |> 
    setDT()
scot_pop <- readRDS(file = "./processed-data/scot_pop.rds") |> 
    setDT()
# filter out "Total" age category
age_vec <- c("0-14", "15-24", "25-49", "50-59", "60-69", "70-79", "80+")
scot_pop <- scot_pop[age_cat %in% age_vec,]
scot_mort <- scot_mort[age_cat %in% age_vec, ]
scot_dt <- scot_mort[, pop_count := scot_pop$pop_count]

# death rate per 100,000
scot_dt[, rate := round(mort_count/pop_count * 100000, 3) ]
 
setcolorder(scot_dt, c("year", "age_cat", "mort_count", "pop_count", "rate"))
setorderv(scot_dt, c("year", "age_cat"))
scot_dt |> 
    head(10) |> 
    gt()
```

## Method 1: Deaths in excess of the average

![](images/method_1.png)

1.  Compute the average number of deaths from 2015 to 2019, by age category.
2.  Calculate difference from average, expressed as a percentage.

```{r}
#| label: "excess above average"
#| 
avg_vec <- scot_mort[year %in% 2015:2019, 
                        floor(mean(mort_count)), 
         by = age_cat ][, V1]
# extract years 2020 to 2022
scot_mort_xs <- scot_mort[year %in% 2020:2022, .(year, age_cat, mort_count)]

# Excess mortality compared to average as a percentage
scot_mort_xs[, mort_xs := (mort_count/avg_vec - 1)*100, by = year] |> 
    head() |> 
    gt()
```

Visualise

```{r}
#| message: false
#| label: "plot excess above average"
#| 
scot_mort_xs[, year := as.factor(year)]
ggplot(data=scot_mort_xs, aes(x=age_cat, y=mort_xs, 
                        fill= year)) +
  geom_bar(stat="identity", position=position_dodge())+
  scale_fill_brewer(palette="Paired") +
  scale_y_continuous(labels = scales::percent_format(scale = 1)) +
  labs(
      title ="older have greater excess deaths",
      subtitle = waiver(),
      caption = "NRS census, popln estimates, and \n Vital Events register",
      x = "age category",
      y = "death rate above average") +
  annotate(geom = "text", x = "0-14", y = 15,
             label = "Method 1") +
  theme_minimal() +
  theme(legend.position='top', 
        legend.justification='left',
        legend.direction='horizontal') 
# ggsave("./figures/method1-diff-avg.jpeg")
```

## Method 2A: Difference from 2019 baseline

![](images/method_2A.png)

The baseline level is the 2019 numbers for each age group. Calculate the difference from the baseline, expressed as a percentage.

```{r}
#| message: false

# Set the base rate from year 2019 values
base <- scot_dt[year==2019, rate]
# Create a baseline vector for the three years 2020 - 2022
base <- rep(base, 3)

# Calculate percent change relative to death rate for 2019
scot_dt[year %in% 2020:2022, 
                       xs_base := round((rate/base-1)*100, 3)]

scot_dt[year %in% 2020:2023,] |> 
    head() |> 
    gt()
```

Visualise

```{r}
#| message: false

scot_20_22 <- scot_dt[year %in% 2020:2022,]
scot_20_22[, year := as.factor(year)]
ggplot(data=scot_20_22, aes(x=age_cat, y=xs_base, 
                        fill= year)) +
  geom_bar(stat="identity", position=position_dodge())+
  scale_fill_brewer(palette="Paired") +
  scale_y_continuous(labels = scales::percent_format(scale = 1)) +
  labs(
  title ="Younger groups have reduced mortality",
  subtitle = waiver(),
  caption = "NRS census, popln estimates, and \n Vital Events register",
  x = "age category",
  y = "death rate above baseline") +
    annotate(geom = "text", x = "0-14", y = 15, 
             label = "Method 2A") +
  theme_minimal() +
  theme(legend.position='top', 
        legend.justification='left',
        legend.direction='horizontal') 
# ggsave("./figures/method2a-xs_base.jpeg")
```

## Method 2C: Difference from linear trend

![](images/method_2C.png)

### Linear Fit of Death Rate for years 2010 to 2019

```{r}
#| warning: false
#| fig-height: 12

scot_lin_fit <- scot_dt[ year %in% c(2010:2019), ]

# Visualize changes over time
g0 <- ggplot(scot_lin_fit[age_cat == "0-14", ], 
                aes(x = year, y = rate)) + 
  geom_point(size = 3, shape=10)+
    geom_smooth(method = lm, se=FALSE) +
    stat_regline_equation(label.x = 2016, label.y = 38, size = 5,
        aes(label =  paste(after_stat(rr.label), sep = "~~~~"))) +
  # x-axis breaks for year from 2010 to 2022
  scale_x_continuous(breaks = 2010:2019) +
    ggtitle("0 to 14 years")

g15 <- ggplot(scot_lin_fit[age_cat == "15-24", ], 
                aes(x = year, y = rate)) + 
  geom_point(size = 3, shape=10)+
    geom_smooth(method = lm, se=FALSE) +
    stat_regline_equation(label.x = 2016, label.y = 50, size = 5,
        aes(label =  paste(after_stat(rr.label), sep = "~~~~"))) +
  # x-axis breaks for year from 2010 to 2022
  scale_x_continuous(breaks = 2010:2019) +
    ggtitle("15 to 24 years")

g25 <- ggplot(scot_lin_fit[age_cat == "25-49", ], 
                aes(x = year, y = rate)) + 
  geom_point(size = 3, shape=10)+
    geom_smooth(method = lm, se=FALSE) +
    stat_regline_equation(label.x = 2016, label.y = 160, size = 5,
        aes(label =  paste(after_stat(rr.label), sep = "~~~~"))) +
  # x-axis breaks for year from 2010 to 2022
  scale_x_continuous(breaks = 2010:2019) +
    ggtitle("25 to 49 years")

g50 <- ggplot(scot_lin_fit[age_cat == "50-59", ], 
                aes(x = year, y = rate)) + 
  geom_point(size = 3, shape=10)+
    geom_smooth(method = lm, se=FALSE) +
    stat_regline_equation(label.x = 2016, label.y = 540, size = 5,
        aes(label =  paste(after_stat(rr.label), sep = "~~~~"))) +
  # x-axis breaks for year from 2010 to 2022
  scale_x_continuous(breaks = 2010:2019) +
    ggtitle("50 to 59 years")

g60 <- ggplot(scot_lin_fit[age_cat == "60-69", ], 
                aes(x = year, y = rate)) + 
  geom_point(size = 3, shape=10)+
    geom_smooth(method = lm, se=FALSE) +
    stat_regline_equation(label.x = 2016, label.y = 1300, size = 5,
        aes(label =  paste(after_stat(rr.label), sep = "~~~~"))) +
  # x-axis breaks for year from 2010 to 2022
  scale_x_continuous(breaks = 2010:2019) +
    ggtitle("60 to 69 years")

g70 <- ggplot(scot_lin_fit[age_cat == "70-79", ], 
                aes(x = year, y = rate)) + 
  geom_point(size = 3, shape=10)+
    geom_smooth(method = lm, se=FALSE) +
    stat_regline_equation(label.x = 2016, label.y = 3400, size = 5,
        aes(label =  paste(after_stat(rr.label), sep = "~~~~"))) +
  # x-axis breaks for year from 2010 to 2022
  scale_x_continuous(breaks = 2010:2019) +
    ggtitle("70 to 79 years")

g80 <- ggplot(scot_lin_fit[age_cat == "80+", ], 
                aes(x = year, y = rate)) + 
  geom_point(size = 3, shape=10)+
    geom_smooth(method = lm, se=FALSE) +
    stat_regline_equation(label.x = 2016, label.y = 11400, size = 5,
        aes(label =  paste(after_stat(rr.label), sep = "~~~~"))) +
  # x-axis breaks for year from 2010 to 2022
  scale_x_continuous(breaks = 2010:2019) +
    ggtitle("80 years and over")

# Remove axis titles from all plots
g_all <- list(g0,g15, g25, g50, g60, g70, g80) %>% 
    map(~.x + labs(x=NULL, y=NULL))
```

[Plot Function](https://community.rstudio.com/t/common-axis-title-in-grid-arrange/96353/2 "source code")

```{r}
#| fig-height: 14
#| fig-width: 12
#| message: false

# plotmath expressions
yleft <- textGrob(expression(paste("deaths per 100,000")), 
                  rot = 90, gp = gpar(fontsize = 20))

bottom <- textGrob("years", gp = gpar(fontsize = 20))

# Lay out plots
uni <- grid.arrange(grobs=g_all, ncol = 2, nrow = 4, 
                    left = yleft, bottom = bottom)
#save - generates g object
# g <- arrangeGrob(g0,g15, g25, g50, g60, g70, g80, nrow=4) 
# #saves g
# ggsave(file="./figures/linear_fit.jpeg", g) 
```

Only age categories 0-14 and 70-79 have adequate $r^2$ value.
