---
title: "Getting and Cleaning Data"
author: "JJC"
format:
    html:
        toc: true
        toc-depth: 2
        toc-title: Table of contents
        # number-sections: true
        code-fold: true
        highlight-style: github
editor: visual
---

```{r}
#| include: false
#| label: load_libraries

library(data.table)
library(janitor)
library(readxl)
library(tidyr)
library(kableExtra)
library(gt)
library(purrr)
library(Hmisc)      # grouping function "cut2"
library(ggplot2)
```

## Population

### 2019

In the source data, year of age and population numbers are stored in multiple columns:

![](images/NRS-2019-pop-by-age.png)

```{r}
#| message: false

source("./code/get-pop.R")
file_year <- "./data/mid-year-pop-est-19-data.xlsx" 
scot_pop19 <- get_pop_year(file_year)
age_categories <- scot_pop19[, age_cat]
```

### 2022

```{r}

# Table 3 contains Population by age category
scot_pop22 <- read_excel("./data/scotland-s-census-2022-first-results-rounded-population-estimates-data.xlsx", 
                         sheet = "Table 3",
                         skip = 3, n_max = 3) |> 
    setDT()
# First 3 columns are superfluous
scot_pop22[, c("Area name", "Area code", "Area type" ) := NULL]
# remove "All ages" column and calculate totals after processing
scot_pop22[, "All ages" := NULL]
scot_pop22 |> 
    kable()
```

This data has three variables:

-   `Sex`, stored in the rows,
-   `age_category` spread across the column names, and
-   population numbers are stored in the cell values.

```{r}
scot_pop22 <- scot_pop22 %>%    
    pivot_longer(     
        cols = !Sex, # reshape every column apart from "Sex" 
        names_to = "age",      
        values_to = "pop",
        names_transform = readr::parse_number) |> 
    clean_names() |> 
    setDT()
head( scot_pop22 )
```

-   There are 19 age categories in 5 year intervals.
-   The last entry is for 90 years and older.
-   `sex` has three categories: *Persons, Males, Females.*

Separate the combined counts, which is given by the "Person" entries in the `sex` variable

```{r}

# store Male and Female values for later analysis 
# scot_pop22_MF <- scot_pop22[sex %in% c("Males","Females") ,]

# All Persons
scot_pop22 <- scot_pop22[sex == "Persons" ,]  

# no longer need the "sex" variable
scot_pop22[, sex := NULL]

# add 'age_cat' column for compatibility with other years
scot_pop22[, age_cat := age_categories][, age := NULL]
setcolorder(scot_pop22, c("age_cat", "pop"))
```

Plot population counts by age category

```{r}
#| message: false

# suppress scientific notation
options(scipen=20)  
library(scales)

ggplot(scot_pop22, aes(age_cat, pop)) + 
  geom_col(aes(fill = pop)) +
  scale_fill_gradient(low = "white", high = "darkblue") +
  labs(title = "Scotland Population 2022",
       subtitle = "by 5-year age category",
       x = "Age 5yr", y = "Population") +
  scale_y_continuous(labels = scales::label_comma()) +
  theme(legend.position = "none") +
    coord_flip()
```

### 2021

```{r}
# Table 1 contains Population by each year of 
scot_pop21 <- read_excel("./data/mid-year-pop-est-21-data.xlsx", 
                         sheet = "Table 1",
                         skip = 3, n_max = 3) |> 
#    clean_names() |> 
    setDT()
# First 3 columns are superfluous
scot_pop21[, c("Area name", "Area code", "Area type" ) := NULL]
# remove "All ages" column and calculate totals after processing
scot_pop21[, "All ages" := NULL]

```

**Inspect the Data**

```{r}
scot_pop21[, 1:10]
```

Check the final column

```{r}

scot_pop21[, 92]
```

This data has three variables:

-   `Sex`, stored in the rows,
-   `age` spread across the column names, and
-   population numbers are stored in the cell values.

`pivot_longer:`

-   `names_to` gives the name of the variable that will be created from the data stored in the column names, i.e. year of age
-   `values_to` gives the name of the variable that will be created from the data stored in the cell value, i.e. population count

Entries in the `age` column are in character format. [`readr::parse_number()`](https://readr.tidyverse.org/reference/parse_number.html) extracts numeric values and automatically strips non-numeric components, so it can deal with the "90+" entry

```{r}
scot_pop21 <- scot_pop21 %>%    
    pivot_longer(     
        cols = !Sex, # reshape every column apart from "Sex" 
        names_to = "age",      
        values_to = "pop",
        names_transform = readr::parse_number) |> 
    clean_names() |> 
    setDT()
```

Separate the combined counts, which is given by the "Person" entries in the `sex` variable

```{r}

# store Male and Female values for later analysis
# scot_pop21_MF <- scot_pop21[sex %in% c("Males","Females") ,]

# counts for male + female
scot_pop21 <- scot_pop21[sex == "Persons" ,]
```

Need to combine rows of `age` to 5-year age categories and to sum the associated population numbers. Bear in mind that the "90" entry refers to ages 90 and above. This means that there will be 18 age categories with an additional one for over 90.

```{r}
# "sex" column is no longer needed
scot_pop21[, sex := NULL]
over90 <- scot_pop21[91, pop]
scot_pop21 <- scot_pop21[-91,]

# Create a grouping variable
scot_pop21[, age_cat := cut2(age, g = 18)]

# sum the number of deaths in each age category
scot_pop21_cats <- scot_pop21[, sum(pop), by = age_cat]
scot_pop21_cats[, pop := V1][, V1 := NULL]

# append an entry for the 90 plus group
oldest <- data.table(age_cat = as.factor("90 plus"), 
                     pop = over90)
scot_pop21 <- rbind(scot_pop21_cats, oldest)

# update "age_cat" column for compatibility with other years
scot_pop21[, age_cat := age_categories]

rm(scot_pop21_cats, oldest, over90)
```

### 2018

```{r}
#| message: false

file_year <- "./data/mid-year-pop-est-18-tabs.xlsx" 

scot_pop18 <- get_pop_year(file_year)
```

### 2017

```{r}
#| message: false

file_year <- "./data/mid-year-pop-est-17-all-tables-revised.xlsx" 

scot_pop17 <- get_pop_year(file_year)
```

### 2016

```{r}
#| message: false

source("./code/get-pop-16.R")
file_year <- "./data/16-mid-year-pe-tab1.xlsx" 

scot_pop16 <- get_pop_2016(file_year)
```

### 2015

```{r}
#| message: false

file_year <- "./data/15mype-cahb-tab1.xlsx" 

scot_pop15 <- get_pop_year(file_year)
```

### 2014

```{r}
#| message: false

file_year <- "./data/14mype-cahb-all-tab.xlsx"  

scot_pop14 <- get_pop_year(file_year)
```

### 2013

```{r}
#| message: false

file_year <- "./data/13mype-cahb-tab1.xlsx"  

scot_pop13 <- get_pop_year(file_year)
```

### 2012

```{r}
#| message: false

file_year <- "./data/12mype-cahb-tab1.xlsx"  

scot_pop12 <- get_pop_year(file_year)
```

### 2011

**Inspect the Data**

```{r}
#| message: false

# File contains a single sheet
scot_pop11 <- read_excel("./data/scotland-census-2011.xlsx", 
                         sheet = "Data Sheet 0",
                         skip = 10, n_max = 3) |> 
    setDT()

# Second columns is superfluous
scot_pop11[, c("...2" ) := NULL]

# remove "All people" column and calculate totals after processing
scot_pop11[, c("All people", "Age") := NULL]
# remove second row since it contains NAs
scot_pop11 <- scot_pop11[2, ]
scot_pop11 |> 
    kable()
```

This data has two variables:

-   `age` spread across the column names, and
-   population numbers are stored in the cell values.

Need to `pivot_longer` to create `age` column and to transpose age values from row to column format.

```{r}
#| message: false

# Rename "Under 1" column to "0" 
# to represent first year of life
setnames(scot_pop11, "Under 1", "0")

scot_pop11 <- scot_pop11 %>%    
    pivot_longer(   
        cols = "0":"100 and over",
        names_to = "age",      
        values_to = "pop",
        names_transform = readr::parse_number) |> 
    clean_names() |> 
    setDT()
head(scot_pop11, 10) 
```

Aggregate rows for ages 90 and above into a single entry for compatibility with data for 2022 and 2021.

```{r}

over90 <- scot_pop11[91:101, sum(pop)]
# remove rows for age 90 and above
scot_pop11 <- scot_pop11[1:90, ]
```

Combine rows into 5-year age categories

```{r}
# Create a grouping variable
scot_pop11[, age_cat := cut2(age, g = 18)]

# sum the number of deaths in each age category
scot_pop11_cats <- scot_pop11[, sum(pop), by = age_cat]

scot_pop11_cats[, pop := V1][, V1 := NULL]

# append an entry for the 90 plus group
oldest <- data.table(age_cat = as.factor("90 plus"), 
                     pop = over90)
scot_pop11 <- rbind(scot_pop11_cats, oldest)

# update "age_cat" for compatibility with other years
scot_pop11[, age_cat := age_categories]
 
# Cleanup
rm(scot_pop11_cats, oldest, over90)
```

Save cleaned data tables

```{r}
scot_all <- ls()[sapply(ls(), function(x) is.data.frame(get(x)))]

save(list = scot_all, file = "./data-clean/scot-pop.RData")

# Cleanup the environment
# keep 'age_categories' vector
remove(list = scot_all)
rm(get_pop_2016, get_pop_year, file_year, scot_all)
```

## Mortality

Table 5.02 contains deaths, by sex, age, and administrative area, Scotland

```{r}
#| include: false

source("./code/get-mort-year.R")
```

### 2022

```{r}
#| message: false

file_year <- "./data/vital-events-22-ref-tabs-5.xlsx"
scot_mort22 <- get_mort_year(file_year)
```

### 2021

```{r}
#| message: false

file_year <- "./data/vital-events-21-ref-tabs-5.xlsx"
scot_mort21 <- get_mort_year(file_year)
```

### 2020

```{r}
#| message: false

file_year <- "./data/vital-events-20-ref-tabs-5.xlsx"
scot_mort20 <- get_mort_year(file_year)
```

### 2019

```{r}
#| message: false

file_year <- "./data/vital-events-19-ref-tabs-5.xlsx"
scot_mort19 <- get_mort_year(file_year)
```

### 2018

```{r}
#| message: false

file_year <- "./data/vital-events-18-ref-tabs-5.xlsx"
scot_mort18 <- get_mort_year(file_year)
```

### 2017

```{r}
#| message: false

file_year <- "./data/vital-events-17-ref-tabs-5.xlsx"
scot_mort17 <- get_mort_year(file_year)
```

### 2016

```{r}
#| message: false

source("./code/get-mort-5-2.R")
file_year <- "./data/vital-events-16-ref-tabs-5-2.xlsx"
scot_mort16 <- get_mort_5_2(file_year)
```

### 2015

```{r}
#| message: false

file_year <- "./data/vital-events-15-ref-tabs-5-2.xlsx"
scot_mort15 <- get_mort_5_2(file_year)
```

### 2014

```{r}
#| message: false

file_year <- "./data/vital-events-14-ref-tabs-5-2.xlsx"
scot_mort14 <- get_mort_5_2(file_year)
```

### 2013

```{r}
#| message: false

file_year <- "./data/vital-events-13-ref-tabs-5-2.xls"
scot_mort13 <- get_mort_5_2(file_year)
```

### 2012

```{r}
#| message: false

file_year <- "./data/vital-events-12-ref-tabs-5-2.xls"
scot_mort12 <- get_mort_5_2(file_year)
```

### 2011

```{r}
#| message: false

file_year <- "./data/vital-events-11-ref-tabs-5-2.xls"
scot_mort11 <- get_mort_5_2(file_year)
```

Save data tables that are in "tidy data" format

```{r}
mort_all <- ls()[sapply(ls(), function(x) is.data.frame(get(x)))]

save(list = mort_all, file = "./data-clean/scot-mort.RData")

# Cleanup the environment
# keep 'age_categories' vector
remove(list = mort_all)
rm(get_mort_year, get_mort_5_2, file_year, mort_all)
```
